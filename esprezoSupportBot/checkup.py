import logging
import sys
from telegram import Update, Bot, ParseMode
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CallbackContext, ConversationHandler, JobQueue, Job

import validators
import googlesheets
from datetime import time, datetime
import pytz


from config import BOT_API_KEY

logger = logging.getLogger(__name__)
logging.basicConfig(stream=sys.stdout, level=logging.INFO)

service = googlesheets.sheetautorize()

PERIOD, DAY, TZONE, TIME = range(4)
NUM, MOOD, NOTES, DATE  = range(4)
MENU = "menu"

WEEK_DAYS = {
	"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "monday",
	"–í—Ç–æ—Ä–Ω–∏–∫": "tuesday",
	"–°—Ä–µ–¥–∞": "wednesday",
	"–ß–µ—Ç–≤–µ—Ä–≥": "thursday",
	"–ü—è—Ç–Ω–∏—Ü–∞": "friday",
	"–°—É–±–±–æ—Ç–∞": "saturday",
	"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":"sunday",
}

WEEK_DAYS_N = {
	"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0,
	"–í—Ç–æ—Ä–Ω–∏–∫": 1,
	"–°—Ä–µ–¥–∞": 2,
	"–ß–µ—Ç–≤–µ—Ä–≥": 3,
	"–ü—è—Ç–Ω–∏—Ü–∞": 4,
	"–°—É–±–±–æ—Ç–∞": 5,
	"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6,
}

CHECKUP_MOOD = {
	"mood_01": "–°—Ç—Ä–∞—Ö",
	"mood_02": "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ",
	"mood_03": "–ì—Ä—É—Å—Ç—å",
	"mood_04": "–û–±–∏–¥–∞",
	"mood_05": "–õ—é–±–æ–≤—å",
	"mood_06": "–ò–Ω—Ç–µ—Ä–µ—Å",
	"mood_07": "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
	"mood_08": "–°—á–∞—Å—Ç—å–µ",
	"mood_09": "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ",
	"mood_10": "–ó–ª–æ—Å—Ç—å",
	"mood_11": "–†–∞–¥–æ—Å—Ç—å",
	"mood_12": "–¢—Ä–µ–≤–æ–≥–∞",
	"mood_13": "–ì–æ—Ä–¥–æ—Å—Ç—å",
	"mood_14": "–°–∫—É–∫–∞",
}

def get_mood_inline_keyboard(n):
	inline_keyboard = [
				[
					InlineKeyboardButton("–°—Ç—Ä–∞—Ö", callback_data = "mood_01"),
					InlineKeyboardButton("–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ", callback_data = "mood_02")
				],
				[
					InlineKeyboardButton("–ì—Ä—É—Å—Ç—å", callback_data = "mood_03"),
					InlineKeyboardButton("–û–±–∏–¥–∞", callback_data = "mood_04")
				],
				[
					InlineKeyboardButton("–õ—é–±–æ–≤—å", callback_data = "mood_05"),
					InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å", callback_data = "mood_06")
				],
				[
					InlineKeyboardButton("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", callback_data = "mood_07"),
					InlineKeyboardButton("–°—á–∞—Å—Ç—å–µ", callback_data = "mood_08")
				],
				[
					InlineKeyboardButton("–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", callback_data = "mood_09"),
					InlineKeyboardButton("–ó–ª–æ—Å—Ç—å", callback_data = "mood_10")
				],
				[
					InlineKeyboardButton("–†–∞–¥–æ—Å—Ç—å", callback_data = "mood_11"),
					InlineKeyboardButton("–¢—Ä–µ–≤–æ–≥–∞", callback_data = "mood_12")
				],
				[
					InlineKeyboardButton("–ì–æ—Ä–¥–æ—Å—Ç—å", callback_data = "mood_13"),
					InlineKeyboardButton("–°–∫—É–∫–∞", callback_data = "mood_14")
				],
				[InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data = f"checkup_{str(int(n) + 1)}")],
				[InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")],
				[InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data = "–î—Ä—É–≥–æ–µ")],
			]
	return (InlineKeyboardMarkup(inline_keyboard))

def get_timezone_inline_keyboard():
	inline_keyboard = [
		[InlineKeyboardButton("–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥(–ú–°–ö-1)", callback_data = "-01:00")],
		[InlineKeyboardButton("–ú–æ—Å–∫–≤–∞ (–ú–°–ö)", callback_data = "+00:00")],
		[InlineKeyboardButton("–°–∞–º–∞—Ä–∞ (–ú–°–ö+1)", callback_data = "+01:00")],
		[InlineKeyboardButton("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (–ú–°–ö+2)", callback_data = "+02:00")],
		[InlineKeyboardButton("–û–º—Å–∫ (–ú–°–ö+3)", callback_data = "+03:00")],
		[InlineKeyboardButton("–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ (–ú–°–ö+4)", callback_data = "+04:00")],
		[InlineKeyboardButton("–ò—Ä–∫—É—Ç—Å–∫ (–ú–°–ö+5)", callback_data = "+05:00")],
		[InlineKeyboardButton("–Ø–∫—É—Ç—Å–∫ (–ú–°–ö+6)", callback_data = "+06:00")],
		[InlineKeyboardButton("–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (–ú–°–ö+7)", callback_data = "+07:00")],
		[InlineKeyboardButton("–ú–∞–≥–∞–¥–∞–Ω (–ú–°–ö+8)", callback_data = "+08:00")],
		[InlineKeyboardButton("–ö–∞–º—á–∞—Ç–∫–∞ (–ú–°–ö+9)", callback_data = "+09:00")]
	]
	return (InlineKeyboardMarkup(inline_keyboard))

def begin_checkup(context: CallbackContext):
	print(context.job.context)
	reply_markup = InlineKeyboardMarkup(inline_keyboard = [
				[
					InlineKeyboardButton("1", callback_data = "checkup_0"),
					InlineKeyboardButton("2", callback_data = "checkup_1"),
					InlineKeyboardButton("3", callback_data = "checkup_2"),
					InlineKeyboardButton("4", callback_data = "checkup_3"),
					InlineKeyboardButton("5", callback_data = "checkup_4")
				],
				[
					InlineKeyboardButton("6", callback_data = "checkup_5"),
					InlineKeyboardButton("7", callback_data = "checkup_6"),
					InlineKeyboardButton("8", callback_data = "checkup_7"),
					InlineKeyboardButton("9", callback_data = "checkup_8"),
					InlineKeyboardButton("10", callback_data = "checkup_9")
				],
			]
			)
	context.bot.send_message(chat_id = int(context.job.context), text = f'–°–∞–ª—é—Ç, {googlesheets.get_name_by_id(context.job.context)}!\n\n–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n\n–û—Ü–µ–Ω–∏ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç 1 –¥–æ 10, –≥–¥–µ\n\n1 ‚Äî ¬´–£–∂–∞—Å–Ω–æ, –ª—É—á—à–µ –±—ã —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª—Å—è¬ª, –∞\n10 ‚Äî ¬´–Ø —Å—É–ø–µ—Ä, –≥–æ—Ç–æ–≤(–∞) —Å–≤–µ—Ä–Ω—É—Ç—å –≥–æ—Ä—ã¬ª', reply_markup = reply_markup)

def set_schedule(update: Update, context: CallbackContext, j):
	data = context.user_data
	cu_time = data[TIME].split(':')
	cu_tzone = data[TZONE].split(':')
	cu_time[0] = int(cu_time[0]) - int(cu_tzone[0])
	chat_id = update.message.chat_id
	current_jobs = j.get_jobs_by_name(str(chat_id))
	logger.info('data: %s', current_jobs)
	for job in current_jobs:
		job.schedule_removal()
	if data[DAY] == "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å":
		j.run_daily(begin_checkup, context = chat_id, days=(0, 1, 2, 3, 4, 5, 6), time = time(hour=int(cu_time[0]), minute=int(cu_time[1]), second=00).replace(tzinfo=pytz.timezone("Europe/Moscow")), name=str(chat_id))
	else:
		j.run_daily(begin_checkup, context = chat_id, days=(WEEK_DAYS_N[data[DAY]], ), time = time(hour=int(cu_time[0]), minute=int(cu_time[1]), second=00).replace(tzinfo=pytz.timezone("Europe/Moscow")), name=str(chat_id))


def	checkup_time_handler(update: Update, context: CallbackContext):
	j = context.job_queue
	#print(j.jobs)
	time = validators.time_validator(text = update.message.text)
	if (time == -1):
		update.message.reply_text('–ö–∞–∂–µ—Ç—Å—è, –≤—Ä–µ–º—è –∑–∞–¥–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë!')
		return (TIME)
	context.user_data[TIME] = time
	logger.info('checkup data: %s', context.user_data)
	set_schedule(update, context, j)
	#print(j.jobs)
	googlesheets.checkup_register(update.message.from_user.id, context.user_data)
	reply_markup = InlineKeyboardMarkup(inline_keyboard = [
		[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data = MENU)],
	])
	update.message.reply_text("–°—É–ø–µ—Ä! –í–µ—Ä–Ω—ë–º—Å—è –∫ —Ç–µ–±–µ –≤ —ç—Ç–æ –≤—Ä–µ–º—è", reply_markup = reply_markup)
	context.user_data.clear()
	return ConversationHandler.END

def other_mood(update: Update, context: CallbackContext):
	message =  update.message.text
	context.user_data[MOOD].append(message)
	logger.info('user_data: %s', context.user_data)
	reply_markup = InlineKeyboardMarkup(inline_keyboard = [
				[
					InlineKeyboardButton("–•–æ—á—É", callback_data = "–•–æ—á—É"),
					InlineKeyboardButton("–ù–µ —Å–µ–≥–æ–¥–Ω—è", callback_data = "–ù–µ —Å–µ–≥–æ–¥–Ω—è")
				],])
	update.message.reply_text(f'{googlesheets.get_name_by_id(update.message.from_user.id)}, —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ —Å–≤–æ—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏?', reply_markup = reply_markup)
	return ConversationHandler.END

def handle_notes(update: Update, context: CallbackContext):
	message =  update.message.text
	context.user_data[NOTES] = message
	now = datetime.now()
	context.user_data[DATE] = now.strftime("%Y/%m/%d")
	logger.info('user_data: %s', context.user_data)
	googlesheets.save_checkup_data(context.user_data, update.message.from_user.id)
	update.message.reply_text('–°–ø–∞—Å–∏–±–æ! –í—Å–µ —Ç–≤–æ–∏ –∑–∞–ø–∏—Å–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ <b>–î–Ω–µ–≤–Ω–∏–∫–µ</b>üìÜ', parse_mode = ParseMode.HTML)
	return ConversationHandler.END
